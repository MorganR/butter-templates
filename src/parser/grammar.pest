WHITESPACE = _{ SPACE_SEPARATOR | "\t" | NEWLINE }
comment_contents = { !NEWLINE ~ ANY }
COMMENT = _{ "//" ~ comment_contents* ~ NEWLINE }

package_name = @{ ASCII_ALPHA_LOWER ~ (ASCII_ALPHA_LOWER | ASCII_DIGIT)* ~ ("." ~ package_name)* }
package_statement = _{ "{" ~ "package" ~ package_name ~ "}" }

path_divider = _{ "/" }
import_path_segment_character = _{ !(path_divider | "'") ~ ANY}
import_path = { import_path_segment_character+ ~ (path_divider ~ import_path)? }

identifier_start = _{LETTER}
identifier_continue = _{LETTER | NUMBER}
identifier = @{ identifier_start ~ identifier_continue* }
import_item = { identifier }
import_rename = { identifier }
import_wild = { "*" ~ "as" ~ import_rename }
import_items = { import_item ~ ("as" ~ import_rename)? ~ ("," ~ import_items)* }
import_selection = _{ import_wild | ( "{" ~ import_items ~ "}" ) }
import_source = @{ "'" ~ import_path ~ "'" }
import_statement = { "import" ~ import_selection ~ "from" ~ import_source } 

call = { identifier ~ "()" }
literal = { "lb" | "rb" }
inner_statement = { !block_statement_end ~ "{" ~ (call | literal) ~ "}"}

html_attribute_key = _{ identifier }
html_attribute_plain_value = @{ (!("\"" | "{") ~ ANY)+ }
// Silent recursive rule for simpler parsing of multiple attribute values. 
html_attribute_nested_value = _{ (inner_statement | html_attribute_plain_value) ~ html_attribute_nested_value? }
html_attribute_value = { html_attribute_nested_value }
html_attribute = { (inner_statement | html_attribute_key) ~ ("=\"" ~ html_attribute_value ~ "\"")? }
html_text_character = _{ !("{" | "<") ~ ANY }
html_text = @{ html_text_character+ }
html_content = _{ (inner_statement | html_tag | html_text) ~ (html_content)? }
html_tag = { 
  !("</" ~ identifier ~ ">") ~ "<" ~ PUSH(identifier) ~ html_attribute* ~ ">" ~
  html_content ~
  "</" ~ POP ~ ">" }

block_type = { "html" }
// TODO: Add arguments
block_statement_start = _{ "{" ~ block_type ~ identifier ~ "()" ~ "}" }
block_content = { html_content }
block_statement_end = _{ "{/}" }
block_statement = {
  block_statement_start ~
  block_content ~
  block_statement_end
}

main = {
  SOI ~
  package_statement ~

  import_statement* ~

  block_statement+ ~
  EOI
}